'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.AUlinkListItem=undefined;var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};var _react=require('react');var _react2=_interopRequireDefault(_react);var _propTypes=require('prop-types');var _propTypes2=_interopRequireDefault(_propTypes);require('../css/styles.css');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _objectWithoutProperties(obj,keys){var target={};for(var i in obj){if(keys.indexOf(i)>=0)continue;if(!Object.prototype.hasOwnProperty.call(obj,i))continue;target[i]=obj[i]}return target}/*! @gov.au/link-list v1.0.0 *//***************************************************************************************************************************************************************
 *
 * link-lists function
 *
 * A simple list of inline links.
 *
 **************************************************************************************************************************************************************/// The following line will be replaced automatically with generic imports for the ES5 pipeline.
// You can safely ignore this bit if you use this module with pancake
//
/**
 * An item inside the AUlinkList component
 *
 * @param  {string} link             - The link URL, optional
 * @param  {string} text             - The link Text
 * @param  {object} li               - An additional object to be spread into the wrapping element, optional
 * @param  {object} attributeOptions - Any other attribute options, optional
 */var AUlinkListItem=function AUlinkListItem(_ref){var text=_ref.text,link=_ref.link,_ref$li=_ref.li,li=_ref$li===undefined?{}:_ref$li,attributeOptions=_objectWithoutProperties(_ref,['text','link','li']);if(typeof onClick==='function'){attributeOptions.onClick=onClick;// if we find an onClick event but no link we make it a link so onClick can be added (no button support yet)
if(!link){link='#'}}return _react2.default.createElement('li',li,link===undefined?text:_react2.default.createElement('a',_extends({href:link},attributeOptions),text))};exports.AUlinkListItem=AUlinkListItem;AUlinkListItem.propTypes={text:_propTypes2.default.string.isRequired,link:_propTypes2.default.string,li:_propTypes2.default.object};/**
 * DEFAULT
 * The Link List component
 *
 * @param  {array}   items            - All items inside the link list to be passed to AUlinkListItem, format: { link: '', text: '', onClick: () }
 * @param  {string}  className        - An additional class, optional
 * @param  {object}  attributeOptions - Any other attribute options, optional
 */var AUlinkList=function AUlinkList(_ref2){var inline=_ref2.inline,items=_ref2.items,_ref2$className=_ref2.className,className=_ref2$className===undefined?'':_ref2$className,attributeOptions=_objectWithoutProperties(_ref2,['inline','items','className']);return _react2.default.createElement('ul',_extends({className:'au-link-list '+className+(inline?' au-link-list--inline':'')},attributeOptions),items.map(function(item,i){return _react2.default.createElement(AUlinkListItem,_extends({key:i},item))}))};AUlinkList.propTypes={inline:_propTypes2.default.bool,items:_propTypes2.default.arrayOf(_propTypes2.default.shape({link:_propTypes2.default.string,text:_propTypes2.default.string.isRequired,li:_propTypes2.default.object})).isRequired};exports.default=AUlinkList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlYWN0LmVzNS5qcyJdLCJuYW1lcyI6WyJBVWxpbmtMaXN0SXRlbSIsInRleHQiLCJsaW5rIiwibGkiLCJhdHRyaWJ1dGVPcHRpb25zIiwib25DbGljayIsInVuZGVmaW5lZCIsInByb3BUeXBlcyIsInN0cmluZyIsImlzUmVxdWlyZWQiLCJvYmplY3QiLCJBVWxpbmtMaXN0IiwiaW5saW5lIiwiaXRlbXMiLCJjbGFzc05hbWUiLCJtYXAiLCJpdGVtIiwiaSIsImJvb2wiLCJhcnJheU9mIiwic2hhcGUiXSwibWFwcGluZ3MiOiJxVUFTQSw0QiwyQ0FDQSxxQyxtREFNQSw2QixxUkFoQkEsK0JBQ0E7Ozs7OztnS0FZQTtBQUNBO0FBQ0E7QUFHQTs7Ozs7OztHQVFPLEdBQU1BLGdCQUFpQixRQUFqQkEsZUFBaUIsTUFBa0QsSUFBL0NDLEtBQStDLE1BQS9DQSxJQUErQyxDQUF6Q0MsSUFBeUMsTUFBekNBLElBQXlDLGNBQW5DQyxFQUFtQyxDQUFuQ0EsRUFBbUMscUJBQTlCLEVBQThCLFNBQXZCQyxnQkFBdUIscURBRS9FLEdBQUksTUFBT0MsUUFBUCxHQUFtQixVQUF2QixDQUFvQyxDQUNuQ0QsaUJBQWlCQyxPQUFqQixDQUEyQkEsT0FBM0IsQ0FFQTtBQUNBLEdBQUksQ0FBQ0gsSUFBTCxDQUFZLENBQ1hBLEtBQU8sR0FDUCxDQUNELENBRUQsTUFDQyxvQ0FBU0MsRUFBVCxDQUVFRCxPQUFTSSxTQUFULENBQ0dMLElBREgsQ0FFRyw0Q0FBRyxLQUFPQyxJQUFWLEVBQXNCRSxnQkFBdEIsRUFBMkNILElBQTNDLENBSkwsQ0FRRCxDQXBCTSxDLHNDQXNCUEQsZUFBZU8sU0FBZixDQUEyQixDQUMxQk4sS0FBTSxvQkFBVU8sTUFBVixDQUFpQkMsVUFERyxDQUUxQlAsS0FBTSxvQkFBVU0sTUFGVSxDQUcxQkwsR0FBSSxvQkFBVU8sTUFIWSxDQUEzQixDQU9BOzs7Ozs7O0dBUUEsR0FBTUMsWUFBYSxRQUFiQSxXQUFhLFdBQUdDLE9BQUgsT0FBR0EsTUFBSCxDQUFXQyxLQUFYLE9BQVdBLEtBQVgsdUJBQWtCQyxTQUFsQixDQUFrQkEsU0FBbEIsNkJBQThCLEVBQTlCLGlCQUFxQ1YsZ0JBQXJDLHNFQUNsQiw4Q0FBSSwwQkFBNkJVLFNBQTdCLEVBQTJDRixPQUFTLHVCQUFULENBQW1DLEVBQTlFLENBQUosRUFBK0ZSLGdCQUEvRixFQUVFUyxNQUFNRSxHQUFOLENBQ0MsU0FBRUMsSUFBRixDQUFRQyxDQUFSLFFBQWUsK0JBQUMsY0FBRCxXQUFnQixJQUFNQSxDQUF0QixFQUErQkQsSUFBL0IsRUFBZixDQURELENBRkYsQ0FEa0IsQ0FBbkIsQ0FVQUwsV0FBV0osU0FBWCxDQUF1QixDQUN0QkssT0FBUSxvQkFBVU0sSUFESSxDQUV0QkwsTUFBTyxvQkFBVU0sT0FBVixDQUNOLG9CQUFVQyxLQUFWLENBQWdCLENBQ2ZsQixLQUFNLG9CQUFVTSxNQURELENBRWZQLEtBQU0sb0JBQVVPLE1BQVYsQ0FBaUJDLFVBRlIsQ0FHZk4sR0FBSSxvQkFBVU8sTUFIQyxDQUFoQixDQURNLEVBTUxELFVBUm9CLENBQXZCLEMsZ0JBV2VFLFUiLCJmaWxlIjoicmVhY3QuZXM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIEBnb3YuYXUvbGluay1saXN0IHYxLjAuMCAqL1xuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICpcbiAqIGxpbmstbGlzdHMgZnVuY3Rpb25cbiAqXG4gKiBBIHNpbXBsZSBsaXN0IG9mIGlubGluZSBsaW5rcy5cbiAqXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbmltcG9ydCBSZWFjdCwgeyBGcmFnbWVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cblxuLy8gVGhlIGZvbGxvd2luZyBsaW5lIHdpbGwgYmUgcmVwbGFjZWQgYXV0b21hdGljYWxseSB3aXRoIGdlbmVyaWMgaW1wb3J0cyBmb3IgdGhlIEVTNSBwaXBlbGluZS5cbi8vIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGJpdCBpZiB5b3UgdXNlIHRoaXMgbW9kdWxlIHdpdGggcGFuY2FrZVxuLy9cbmltcG9ydCAnLi4vY3NzL3N0eWxlcy5jc3MnO1xuXG4vKipcbiAqIEFuIGl0ZW0gaW5zaWRlIHRoZSBBVWxpbmtMaXN0IGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gbGluayAgICAgICAgICAgICAtIFRoZSBsaW5rIFVSTCwgb3B0aW9uYWxcbiAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCAgICAgICAgICAgICAtIFRoZSBsaW5rIFRleHRcbiAqIEBwYXJhbSAge29iamVjdH0gbGkgICAgICAgICAgICAgICAtIEFuIGFkZGl0aW9uYWwgb2JqZWN0IHRvIGJlIHNwcmVhZCBpbnRvIHRoZSB3cmFwcGluZyBlbGVtZW50LCBvcHRpb25hbFxuICogQHBhcmFtICB7b2JqZWN0fSBhdHRyaWJ1dGVPcHRpb25zIC0gQW55IG90aGVyIGF0dHJpYnV0ZSBvcHRpb25zLCBvcHRpb25hbFxuICovXG5leHBvcnQgY29uc3QgQVVsaW5rTGlzdEl0ZW0gPSAoeyB0ZXh0LCBsaW5rLCBsaSA9IHt9LCAuLi5hdHRyaWJ1dGVPcHRpb25zIH0pID0+IHtcblxuXHRpZiggdHlwZW9mIG9uQ2xpY2sgPT09ICdmdW5jdGlvbicgKSB7XG5cdFx0YXR0cmlidXRlT3B0aW9ucy5vbkNsaWNrID0gb25DbGljaztcblxuXHRcdC8vIGlmIHdlIGZpbmQgYW4gb25DbGljayBldmVudCBidXQgbm8gbGluayB3ZSBtYWtlIGl0IGEgbGluayBzbyBvbkNsaWNrIGNhbiBiZSBhZGRlZCAobm8gYnV0dG9uIHN1cHBvcnQgeWV0KVxuXHRcdGlmKCAhbGluayApIHtcblx0XHRcdGxpbmsgPSAnIyc7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIChcblx0XHQ8bGkgeyAuLi5saSB9PlxuXHRcdFx0e1xuXHRcdFx0XHRsaW5rID09PSB1bmRlZmluZWRcblx0XHRcdFx0XHQ/IHRleHRcblx0XHRcdFx0XHQ6IDxhIGhyZWY9eyBsaW5rIH0geyAuLi5hdHRyaWJ1dGVPcHRpb25zIH0+eyB0ZXh0IH08L2E+XG5cdFx0XHR9XG5cdFx0PC9saT5cblx0KTtcbn07XG5cbkFVbGlua0xpc3RJdGVtLnByb3BUeXBlcyA9IHtcblx0dGV4dDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuXHRsaW5rOiBQcm9wVHlwZXMuc3RyaW5nLFxuXHRsaTogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cblxuLyoqXG4gKiBERUZBVUxUXG4gKiBUaGUgTGluayBMaXN0IGNvbXBvbmVudFxuICpcbiAqIEBwYXJhbSAge2FycmF5fSAgIGl0ZW1zICAgICAgICAgICAgLSBBbGwgaXRlbXMgaW5zaWRlIHRoZSBsaW5rIGxpc3QgdG8gYmUgcGFzc2VkIHRvIEFVbGlua0xpc3RJdGVtLCBmb3JtYXQ6IHsgbGluazogJycsIHRleHQ6ICcnLCBvbkNsaWNrOiAoKSB9XG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBjbGFzc05hbWUgICAgICAgIC0gQW4gYWRkaXRpb25hbCBjbGFzcywgb3B0aW9uYWxcbiAqIEBwYXJhbSAge29iamVjdH0gIGF0dHJpYnV0ZU9wdGlvbnMgLSBBbnkgb3RoZXIgYXR0cmlidXRlIG9wdGlvbnMsIG9wdGlvbmFsXG4gKi9cbmNvbnN0IEFVbGlua0xpc3QgPSAoeyBpbmxpbmUsIGl0ZW1zLCBjbGFzc05hbWUgPSAnJywgLi4uYXR0cmlidXRlT3B0aW9ucyB9KSA9PiAoXG5cdDx1bCBjbGFzc05hbWU9eyBgYXUtbGluay1saXN0ICR7IGNsYXNzTmFtZSB9JHsgaW5saW5lID8gJyBhdS1saW5rLWxpc3QtLWlubGluZScgOiAnJyB9YCB9IHsgLi4uYXR0cmlidXRlT3B0aW9ucyB9PlxuXHRcdHtcblx0XHRcdGl0ZW1zLm1hcChcblx0XHRcdFx0KCBpdGVtLCBpICkgPT4gPEFVbGlua0xpc3RJdGVtIGtleT17IGkgfSB7IC4uLml0ZW0gfSAvPlxuXHRcdFx0KVxuXHRcdH1cblx0PC91bD5cbik7XG5cbkFVbGlua0xpc3QucHJvcFR5cGVzID0ge1xuXHRpbmxpbmU6IFByb3BUeXBlcy5ib29sLFxuXHRpdGVtczogUHJvcFR5cGVzLmFycmF5T2YoXG5cdFx0UHJvcFR5cGVzLnNoYXBlKHtcblx0XHRcdGxpbms6IFByb3BUeXBlcy5zdHJpbmcsXG5cdFx0XHR0ZXh0OiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG5cdFx0XHRsaTogUHJvcFR5cGVzLm9iamVjdCxcblx0XHR9KVxuXHQpLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBVWxpbmtMaXN0O1xuIl19